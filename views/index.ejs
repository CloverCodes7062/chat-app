<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1>Hi <%= name %> Welcome To The Chatroom</h1>
    <main class="main-section">
        <div class="messages-container">
            <ul id="messagesList" class="messages-ul">
                <% for (let i = 0; i < messages.length; i++) { %>
                    <div>
                        <li>Sent by <%= messages[i].name %> on <%= messages[i].sentOn %></li>
                        <li><%= messages[i].message %></li>
                    </div>
                    <form class="preventDefault" action="/delete-message/<%= messages[i].id %>?_method=DELETE" method="POST">
                        <button type="submit">Delete</button>
                    </form>
                <% } %>
            </ul>
            <form id="preventDefault-POST" action="/" method="POST">
                <div>
                    <label for="message">Enter a Message</label>
                    <input type="text" name="message" id="message" placeholder="Enter a message" required>
                    <button type="submit">Submit</button>
                </div>
            </form>
        </div>
        <div class="screenshare-container">
            <video id="localScreen" style="display: none; width: 75vw; height: auto;" autoplay muted></video>
            <video id="remoteVideo" style="display: none; width: 75vw; height: auto;" autoplay muted></video>
            <button id="startScreenShare">Start Screen Share</button>
            <button id="stopScreenShare" style="display: none;">Stop Screen Share</button>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const sendMsgForm = document.getElementById('preventDefault-POST');

                sendMsgForm.addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const messageInput = document.getElementById('message');
                    const message = messageInput.value;
                    console.log('Message to Send', message);

                    axios.post('/', { message: message })
                        .then(() => {
                            console.log('Message Successfully Sent To Backend');
                            messageInput.value = '';
                        })
                        .catch((error) => console.log('Erroing Sending Message', error));

                });
            });

            let screenStream;
            let peerId;
            let remotePeerId;
            const socket = io();
        
            let peer = new Peer();
        
            peer.on('open', (id) => {
                console.log('My peer Id is: ' + id);
                peerId = id;
                socket.emit('sendPeerId', peerId);
            });
        
            socket.on('receivePeerId', (receivedPeerId) => {
                console.log('Received peer ID: ' + receivedPeerId);
                remotePeerId = receivedPeerId;
            });

            socket.on('newMessage', (message) => {
                console.log('New Message Event Triggered');
                console.log(message);
                const messagesList = document.getElementById('messagesList');
                const listItem = document.createElement('div');
                listItem.innerHTML = `
                    <li>Sent By ${message.name} on ${message.sentOn}</li>
                    <li>${message.message}</li>
                `;
                messagesList.appendChild(listItem);

                const deleteForm = document.createElement('form');
                deleteForm.action = `/delete-message/${message._id}?_method=DELETE`;
                deleteForm.method = 'POST';
                deleteForm.innerHTML = `<button type="submit">Delete</button>`;
                messagesList.appendChild(deleteForm);

            });

            peer.on('call', (call) => {
                console.log('Incoming Call');
                
                call.answer();

                call.on('stream', (stream) => {
                    console.log('stream', stream);

                    const remoteVideo = document.getElementById('remoteVideo');
                    remoteVideo.srcObject = stream;
                    remoteVideo.style.display = 'block';
                    console.log('remoteVideo', remoteVideo);
                });
            })

            document.getElementById('startScreenShare').addEventListener('click', () => {
                navigator.mediaDevices.getDisplayMedia({ video: true })
                    .then(stream => {
                        screenStream = stream;
        
                        document.getElementById('localScreen').srcObject = stream;
                        document.getElementById('localScreen').style.display = 'block';
        
                        document.getElementById('startScreenShare').style.display = 'none';
                        document.getElementById('stopScreenShare').style.display = 'block';
        
                        screenStream.getVideoTracks()[0].onended = () => {
                            stopScreenShare();
                        };
        
                        if (remotePeerId) {
                            shareScreen();
                        }
                    })
                    .catch(error => console.log('Error starting the screen share: ', error));
            });
        
            document.getElementById('stopScreenShare').addEventListener('click', () => {
                stopScreenShare();
            });
        
            function stopScreenShare() {
                screenStream.getTracks().forEach(track => track.stop());
        
                screenStream = null;
        
                document.getElementById('startScreenShare').style.display = 'block';
                document.getElementById('stopScreenShare').style.display = 'none';
                document.getElementById('localScreen').style.display = 'none';
        
                if (peer && peer.destroy) {
                    peer.destroy();
        
                    peer = new Peer();
                }
            }
        
            function shareScreen() {
                console.log('shareScreen Called');

                const call = peer.call(remotePeerId, screenStream);
                console.log('Remote Peer ID, Stream', remotePeerId, screenStream);
            } 
        </script>
    </main>
    <form action="/logout?_method=DELETE" method="POST">
        <button type="submit">Log Out</button>
    </form>
</body>
</html>